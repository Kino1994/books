openapi: 3.0.0
info:
  title: Books
  description: Books Management API
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/Kino1994/Books/1.0.0
  description: SwaggerHub API Auto Mocking
paths:
  /books:
    get:
      tags:
      - Books
      description: Get all Books
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        "500":
          description: Internal server error
    post:
      tags:
      - Books
      description: Create a Book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookPost'
        required: true
      responses:
        "201":
          description: The book was created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookInfo'
        "400":
          description: Bad request
        "500":
          description: Internal server error
  /books/{id}:
    get:
      tags:
      - Books
      description: Get Book by id
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookInfo'
        "404":
          description: The specified book was not found.
  /books/{id}/comment:
    put:
      tags:
      - Books
      description: Add a comment to a book
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentPost'
        required: true
      responses:
        "200":
          description: The comment was added successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookInfo'
        "400":
          description: Bad request
        "404":
          description: The specified book was not found.
        "500":
          description: Internal server error
  /books/{id}/comment/{comment_id}:
    delete:
      tags:
      - Books
      description: Delete a comment from a book
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: comment_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: The comment was deleted successfully.
        "404":
          description: One of the specified resource was not found.
        "500":
          description: Internal server error
components:
  schemas:
    Book:
      required:
      - id
      - tittle
      type: object
      properties:
        id:
          type: integer
          format: int64
        tittle:
          type: string
    BookPost:
      required:
      - author
      - editorial
      - publication_year
      - summary
      - tittle
      type: object
      properties:
        tittle:
          type: string
        summary:
          type: string
        author:
          type: string
        editorial:
          type: string
        publication_year:
          type: integer
          format: int32
    BookInfo:
      required:
      - id
      - tittle
      type: object
      properties:
        id:
          type: integer
          format: int64
        tittle:
          type: string
        summary:
          type: string
        author:
          type: string
        editorial:
          type: string
        publication_year:
          type: integer
          format: int64
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    Comment:
      required:
      - id
      - message
      - name
      - score
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        message:
          type: string
        score:
          maximum: 5
          minimum: 1
          type: integer
          format: int32
    CommentPost:
      required:
      - message
      - name
      - score
      type: object
      properties:
        name:
          type: string
        message:
          type: string
        score:
          maximum: 5
          minimum: 1
          type: integer
          format: int32